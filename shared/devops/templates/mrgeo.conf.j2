
# These paths will probably stay the same
image.base = /mrgeo/images
vector.base = /mrgeo/vectors
kml.base = /mrgeo/kml
tsv.base = /mrgeo/tsv
colorscale.base = /mrgeo/color-scales

# This is the spot in HDFS where jars are distributed for the mappers/reducers
distributed.base = /mrgeo/jars

# Path(s) to gdal shared libraries, separated by ":".
# Currently, we use: libgdal, libgdaljni.so, libgdalconstjni, and libosrjni.so
gdal.path = /usr/lib:/usr/lib/jni:/usr/lib/ogdi

# Denote which cluster type you have.  Mainly used for Spark processing.  Valid values
# are: yarn, spark, and local
cluster=yarn

# The prefered provider to use if there are more than one, and the provider is missing
# from the name.  Can use preferred.provider for all the types, or each one uniquely
preferred.provider = hdfs
#preferred.image.provider = hdfs
#preferred.vector.provider = hdfs
#preferred.adhoc.provider = hdfs

# This flag is used to perform special processing when being run
# on a developer's machine. For example, it changes the way we
# search for JAR dependencies to prevent recursing through each
# element of the classpath that is a directory looking for JARs.
development.mode=true

# Additional classpath elements used for finding dependencies used in distributed
# processing.  These are added AFTER MRGEO_HOME dependencies, but before
# any others on the classpath
dependency.classpath=target/lib:\
                     $MRGEO_HOME/mrgeo-opensource/mrgeo-core/target:\
                     $MRGEO_HOME/mrgeo-opensource/mrgeo-vector/target:\
                     $MRGEO_HOME/mrgeo-opensource/mrgeo-mapalgebra/mrgeo-mapalgebra-costdistance/target:\
                     $MRGEO_HOME/mrgeo-opensource/mrgeo-mapalgebra/mrgeo-mapalgebra-image/target:\
                     $MRGEO_HOME/mrgeo-opensource/mrgeo-mapalgebra/mrgeo-mapalgebra-integrationtests/target:\
                     $MRGEO_HOME/mrgeo-opensource/mrgeo-mapalgebra/mrgeo-mapalgebra-rastermath/target:\
                     $MRGEO_HOME/mrgeo-opensource/mrgeo-mapalgebra/mrgeo-mapalgebra-rasterizevector/target:\
                     $MRGEO_HOME/mrgeo-opensource/mrgeo-mapalgebra/mrgeo-mapalgebra-vector/target:\
                     $MRGEO_HOME/mrgeo-opensource/mrgeo-mapalgebra/mrgeo-mapalgebra-terrain/target:\
                     $MRGEO_HOME/mrgeo-proprietary/mrgeo-proprietary-mapalgebra/mrgeo-mapalgebra-foresight/target:\
                     $MRGEO_HOME/mrgeo-proprietary/mrgeo-proprietary-mapalgebra/mrgeo-mapalgebra-junkyard/target:\
                     $MRGEO_HOME/mrgeo-proprietary/mrgeo-proprietary-mapalgebra/mrgeo-mapalgebra-mrsvector/target:\
                     $MRGEO_HOME/mrgeo-proprietary/mrgeo-proprietary-mapalgebra/mrgeo-mapalgebra-paintellipse/target:\
                     $MRGEO_HOME/mrgeo-proprietary/mrgeo-proprietary-mapalgebra/mrgeo-proprietary-mapalgebra-integrationtests/target:\
                     $MRGEO_HOME/mrgeo-opensource/mrgeo-pig/target:\
                     $MRGEO_HOME/mrgeo-opensource/mrgeo-cmd/mrgeo-cmd-distribution/target/lib:\
                     $MRGEO_HOME/mrgeo-proprietary/mrgeo-cmd/mrgeo-cmd-distribution/target/lib:\

# Use Kryo serialization for Spark jobs, if using Spark < 1.3.0, this _MUST_ be false!
use.kryo.serialization=false

# Memory intensive (Spark) job memory multiplier.  This parameter specifies a multiplier for the
# amount of memory to give to memory intensive jobs.  For example, if YARN was configured to give
# 2G (2048m) to a job, a multiplier of 2 would yield 4G, 1.5 would yield 3G.  The total number of
# concurrent tasks will be be lowered by the appripriate amount
memoryintensive.multiplier=2

# This is the maximum amount of memory to give to the workers for mrgeo processing.  Any memory
# above this will be allocated to Spark shuffle and cache, based on the shuffle.fraction property.
# The calculations WILL NOT kick in until there is twice the memory as max.processing.memory.  If
# the worker memory is less than twice max.processing.memory, 1/2 will go to processing, and the
# rest will be distributed to shuffle and storage based on the shuffle fraction.
# For example, if max.processing.memory is 1G, when the worker reaches 2G or more, 1G will be allocated
# to mrgeo for processing and the rest allocated to shuffle & storage.
max.processing.memory=1024m
shuffle.fraction=0.5

# Additional hadoop parameters as well as parameters needed for Giraph.
# Either hadoop.params with -libjars and the path to <giraph-with-dependencies>,
# or zooservers pointing to existing zookeeper host/port(s) need to be set
#zooservers=host1:port1,host2:port2,host3:port3
zooservers=127.0.0.1:2181
#hadoop.params=-libjars /home/<user>/.m2/repository/org/apache/giraph/giraph-core/1.0.0/giraph-core-1.0.0.jar

# Modify this to match your server config. You may need to change the port, etc.  Do not remove
# the trailing forward slash.
# NOTE:  This appears only to be used in the KMLGenerator and tests.  Look to remove it...
base.url = http://localhost:8080/mrgeo/

# Size of a mrsimage tile (this should not be changed unless there is a great reason)
mrsimage.tilesize = 512

# MrGeo Publishing Profiles
# Each profile should have a name, preceded by mrgeo.publisher.  The prefix and the profile name should precede the
# properties for that profile.  Every profile must include a class name for the publisher class and the configurator
# class.  Currently MrGeo will publish the image to all profiles if the publishImage option passed to the save mapop is
# true.  Profiles may contain encrypted properties, such as passwords.  Properties can be encrypted with the encrypt
# script.  Encrypted property values should be surrounded by ENC() The master password used to encrypt properties should
# be passed in at runtime as a system property (i.e. -Dmrgeo.encryption.masterPassword=<masterPassword>).


# Geoserver Publishing Profiles
# Profiles may be configured to publish images to a Geoserver instance via the geoserver REST interface.  The following
# properties are required for any geoserver publishing profile
#
# Geoserver publisher classes
# mrgeo.publisher.localGeoserver.class=org.mrgoe.publisher.rest.geoserver.GeoserverPublisher
# mrgeo.publisher.localGeoserver.configuratorClass=org.mrgeo.publisher.rest.geoserver.GeoserverPublisherConfigurator
#
# Geoserver Base URL - Should be the Geoserver url up to and including the rest/ part.  See the example below
# mrgeo.publisher.localGeoserver.geoserverUrl = http://localhost:8085/geoserver/rest
#
# Geoserver Username
# mrgeo.publisher.localGeoserver.geoserverUsername = admin
#
# Geoserver Password - This will likley be encrypted in production but may be unencrypted in development
# mrgeo.publisher.localGeoserver.geoserverPassword = geoserver
#
# The following properties are optional for a geoserver publishing profile
#
# Workspace - The workspace to publish images to.  It will be created if it does not exist.
# mrgeo.publisher.localGeoserver.workspace = mrgeo-workspace
#
# Coverage Store Name - The name of the coverage store to publish images to.  It will be created if it does not exist.
# mrgeo.publisher.localGeoserver.coverageStore.name = mrgeo-coverage-store
#
# Coverage Store Description - A description of the coverage store
# mrgeo.publisher.localGeoserver.coverageStore.description = "MrGeo data source, automatically (periodically) updated with new layers"
#
# Coverage Store Type - The type of the coverage store to publish images to.  This is used by geoserver to create the
# correct reader for the coverages.  Recommend not setting this and let it use the default.
# mrgeo.publisher.localGeoserver.coverageStore.type = MrGeo
#
# Coverage Store Name - The MrGeo config file the reader should use.  Typically, this will be the default "mrgeo.config",
# located in the MRGEO_HOME directory but a path or a URL to a config file may be specified
# mrgeo.publisher.localGeoserver.coverageStore.configUrl = mrgeo.config
